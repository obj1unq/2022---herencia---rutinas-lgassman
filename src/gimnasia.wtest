import gimnasia.*

describe "rutinas" {

//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad=1.2)
	// Una actividad de running con intensisdad 1.2

	const remarEnElDelta = new Remo()// Una actividad de remo

	const remarEnCaminoRemeros = new RemoCompeticion()// Una actividad de remo comptetitivo
	
	const maratonBA = new Maraton(intensidad=1.5) 
	//Una maraton con intensidad 1.5

//Punto 2: personas
	const calamardo = new PersonaSedentaria(peso=60, tiempo=5)//Una persona Sedentaria con peso 60 y tiempo de ejercicio 5
 	const bob =  new PersonaAtleta(peso=40)// Una persona atleta con peso 40 

//Punto 3: clubes
	const recreo = new Predio(rutinas=#{correrEnLaPlaya, maratonBA})//un predio con correrEnLaPlaya y maratonBA
	const nautico = new Predio(rutinas=#{remarEnElDelta, remarEnCaminoRemeros})//un predio con correrEnLaPlaya y maratonBA
	//const nautico = //un predio con remarEnElDelta y remarEnCaminoRemeros
	//const clubBarrial = //un club con recreo y nautico
	const clubBarrial = new Club(predios=#{recreo, nautico})//un club con recreo y nautico

//	
//
// PUNTO 1
	test "1.1 consulta running" {
		//correrEnLaPlaya deberia gastar 360 calorias al practicarse por 5 minutos
		assert.equals(360, correrEnLaPlaya.caloriasQuemadas(5)) 
	
		assert.equals(10200, correrEnLaPlaya.caloriasQuemadas(90))	}
		//correrEnLaPlaya deberia gastar 10200 calorias al practicarse por 90 minutos

	test "1.2 consulta maraton" {
		//maratonBA deberia gastar 900 calorias al practicarse por 5 minutos
		assert.equals(900, maratonBA.caloriasQuemadas(5))
		//maratonBA deberia gastar 25500 calorias al practicarse por 90 minutos
		assert.equals(25500, maratonBA.caloriasQuemadas(90))
	}

	test "1.3 consulta remo" {
		//remarEnElDelta deberia gastar 520 calorias al practicarse por 5 minutos
		assert.equals(520, remarEnElDelta.caloriasQuemadas(5))
		//remarEnElDelta deberia gastar 9360 calorias al practicarse por 90 minutos
		assert.equals(9360, remarEnElDelta.caloriasQuemadas(90))
	}
	

	test "1.4 consulta remo competitivo" {
		assert.equals(510, remarEnCaminoRemeros.caloriasQuemadas(5))
		assert.equals(12750, remarEnCaminoRemeros.caloriasQuemadas(90))
		//remarEnCaminoRemeros deberia gastar 510 calorias al practicarse por 5 minutos
		//remarEnCaminoRemeros deberia gastar 12750 calorias al practicarse por 90 minutos
	}
	


//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test '2.1.1 test sedentario running' {
		// hacer que calamardo practique correrEnLaPlaya
		calamardo.practicar(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
		// el peso de calamardo debería ser  (truncado a 3 decimales)
	} 
	
	test '2.1.2 test sedentario maraton' {
		// hacer que calamardo practique maratonBA
		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
		calamardo.practicar(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo' {
		// hacer que calamardo practique remarEnElDelta
		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
		calamardo.practicar(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	} 

	test '2.1.4 test sedentario remo competicion' {
		// hacer que calamardo practique remarEnCaminoRemeros
		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
		calamardo.practicar(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	} 
	
	test '2.1.5 test sedentario no puede practicar' {
		// Hacer que el peso de calamardo sea 40
		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
		// el peso de calamardo debería ser 40 
		calamardo.peso(40)
		assert.throwsException({calamardo.practicar(correrEnLaPlaya)})
		assert.equals(40, calamardo.peso())
	} 
	
	test "2.2.1 test atleta running" {
		// hacer que bob practique correrEnLaPlaya
		bob.practicar(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
	 }

	test "2.2.2 test atleta maraton" {
		// hacer que bob practique maratonBA
		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
		bob.practicar(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))

	 }

	test "2.2.3 test atleta remo" {
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		// el peso de bob debería ser 40 
		assert.throwsException({bob.practicar(remarEnElDelta)})
		assert.equals(40, bob.peso().truncate(3))
	}

	test "2.2.4 test atleta remo de competición" {
		// hacer que bob practique remarEnCaminoRemeros
		// el peso de bob debería ser 39.406
		bob.practicar(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
	}
	 
//punto 3: Consultas
	test "3.1 el mejor predio" {
		//El mejor predio del clubBarrial para bob debería ser recreo
		assert.equals(recreo, clubBarrial.mejorPredio(bob))		
		assert.equals(recreo, clubBarrial.mejorPredio(calamardo))		
		//El mejor predio del clubBarrial para calamardo debería ser recreo		
	}	
	
	test "3.2 predios tranquis" {
		//No debería haber predios tranquis en el clubBarrial para bob
		assert.equals(#{}, clubBarrial.prediosTranquis(bob))
		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo 
		assert.equals(#{recreo}, clubBarrial.prediosTranquis(calamardo)) 
	}
	
	test "3.3 rutinas más exigentes" {
		assert.equals(#{maratonBA, remarEnCaminoRemeros}, clubBarrial.rutinasExigentes(bob))
		assert.equals(#{maratonBA, remarEnElDelta}, clubBarrial.rutinasExigentes(calamardo))
		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
	}
	
}